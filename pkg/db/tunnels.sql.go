// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tunnels.sql

package db

import (
	"context"
)

const createTunnel = `-- name: CreateTunnel :one
INSERT INTO tunnels (
    name,
    remote_port,
    local_host,
    local_port,
    pid
  )
VALUES (?, ?, ?, ?, ?)
RETURNING id, name, remote_port, local_host, local_port, pid
`

type CreateTunnelParams struct {
	Name       string `json:"name"`
	RemotePort int64  `json:"remotePort"`
	LocalHost  string `json:"localHost"`
	LocalPort  int64  `json:"localPort"`
	Pid        *int64 `json:"pid"`
}

func (q *Queries) CreateTunnel(ctx context.Context, arg CreateTunnelParams) (Tunnel, error) {
	row := q.db.QueryRowContext(ctx, createTunnel,
		arg.Name,
		arg.RemotePort,
		arg.LocalHost,
		arg.LocalPort,
		arg.Pid,
	)
	var i Tunnel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RemotePort,
		&i.LocalHost,
		&i.LocalPort,
		&i.Pid,
	)
	return i, err
}

const deleteTunnel = `-- name: DeleteTunnel :exec
DELETE FROM tunnels
WHERE id = ?
`

func (q *Queries) DeleteTunnel(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTunnel, id)
	return err
}

const getTunnel = `-- name: GetTunnel :one
SELECT id, name, remote_port, local_host, local_port, pid
FROM tunnels
WHERE id = ?
`

func (q *Queries) GetTunnel(ctx context.Context, id int64) (Tunnel, error) {
	row := q.db.QueryRowContext(ctx, getTunnel, id)
	var i Tunnel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RemotePort,
		&i.LocalHost,
		&i.LocalPort,
		&i.Pid,
	)
	return i, err
}

const getTunnels = `-- name: GetTunnels :many
SELECT id, name, remote_port, local_host, local_port, pid
FROM tunnels
`

func (q *Queries) GetTunnels(ctx context.Context) ([]Tunnel, error) {
	rows, err := q.db.QueryContext(ctx, getTunnels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tunnel
	for rows.Next() {
		var i Tunnel
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.RemotePort,
			&i.LocalHost,
			&i.LocalPort,
			&i.Pid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTunnel = `-- name: UpdateTunnel :exec
UPDATE tunnels
SET name = ?,
  remote_port = ?,
  local_host = ?,
  local_port = ?,
  pid = ?
WHERE id = ?
`

type UpdateTunnelParams struct {
	Name       string `json:"name"`
	RemotePort int64  `json:"remotePort"`
	LocalHost  string `json:"localHost"`
	LocalPort  int64  `json:"localPort"`
	Pid        *int64 `json:"pid"`
	ID         int64  `json:"id"`
}

func (q *Queries) UpdateTunnel(ctx context.Context, arg UpdateTunnelParams) error {
	_, err := q.db.ExecContext(ctx, updateTunnel,
		arg.Name,
		arg.RemotePort,
		arg.LocalHost,
		arg.LocalPort,
		arg.Pid,
		arg.ID,
	)
	return err
}

const updateTunnelPid = `-- name: UpdateTunnelPid :exec
UPDATE tunnels
SET pid = ?
WHERE id = ?
`

type UpdateTunnelPidParams struct {
	Pid *int64 `json:"pid"`
	ID  int64  `json:"id"`
}

func (q *Queries) UpdateTunnelPid(ctx context.Context, arg UpdateTunnelPidParams) error {
	_, err := q.db.ExecContext(ctx, updateTunnelPid, arg.Pid, arg.ID)
	return err
}
