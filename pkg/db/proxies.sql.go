// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: proxies.sql

package db

import (
	"context"
)

const createProxy = `-- name: CreateProxy :one
INSERT INTO proxies (name, upstream, match)
VALUES (?, ?, ?)
RETURNING id, name, upstream, "match"
`

type CreateProxyParams struct {
	Name     string `json:"name"`
	Upstream string `json:"upstream"`
	Match    string `json:"match"`
}

func (q *Queries) CreateProxy(ctx context.Context, arg CreateProxyParams) (Proxy, error) {
	row := q.db.QueryRowContext(ctx, createProxy, arg.Name, arg.Upstream, arg.Match)
	var i Proxy
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Upstream,
		&i.Match,
	)
	return i, err
}

const deleteProxy = `-- name: DeleteProxy :exec
DELETE FROM proxies
WHERE id = ?
`

func (q *Queries) DeleteProxy(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProxy, id)
	return err
}

const deleteProxyByMatch = `-- name: DeleteProxyByMatch :exec
DELETE FROM proxies
WHERE match = ?
`

func (q *Queries) DeleteProxyByMatch(ctx context.Context, match string) error {
	_, err := q.db.ExecContext(ctx, deleteProxyByMatch, match)
	return err
}

const getProxies = `-- name: GetProxies :many
SELECT id, name, upstream, "match"
FROM proxies
`

func (q *Queries) GetProxies(ctx context.Context) ([]Proxy, error) {
	rows, err := q.db.QueryContext(ctx, getProxies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Proxy
	for rows.Next() {
		var i Proxy
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Upstream,
			&i.Match,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProxy = `-- name: GetProxy :one
SELECT id, name, upstream, "match"
FROM proxies
WHERE id = ?
`

func (q *Queries) GetProxy(ctx context.Context, id int64) (Proxy, error) {
	row := q.db.QueryRowContext(ctx, getProxy, id)
	var i Proxy
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Upstream,
		&i.Match,
	)
	return i, err
}

const getProxyByMatch = `-- name: GetProxyByMatch :one
SELECT id, name, upstream, "match"
FROM proxies
WHERE match = ?
`

func (q *Queries) GetProxyByMatch(ctx context.Context, match string) (Proxy, error) {
	row := q.db.QueryRowContext(ctx, getProxyByMatch, match)
	var i Proxy
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Upstream,
		&i.Match,
	)
	return i, err
}

const updateProxy = `-- name: UpdateProxy :exec
UPDATE proxies
SET name = ?,
  upstream = ?,
  match = ?
WHERE id = ?
`

type UpdateProxyParams struct {
	Name     string `json:"name"`
	Upstream string `json:"upstream"`
	Match    string `json:"match"`
	ID       int64  `json:"id"`
}

func (q *Queries) UpdateProxy(ctx context.Context, arg UpdateProxyParams) error {
	_, err := q.db.ExecContext(ctx, updateProxy,
		arg.Name,
		arg.Upstream,
		arg.Match,
		arg.ID,
	)
	return err
}
